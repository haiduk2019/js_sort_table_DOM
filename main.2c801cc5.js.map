{"version":3,"sources":["scripts/main.js"],"names":["tableHead","document","querySelector","tableData","rows","Array","from","querySelectorAll","sortFields","e","fieldHeading","target","closest","fieldIndex","cellIndex","sortedRows","sort","element1","element2","result1","cells","textContent","result2","isNaN","takeNumber","localeCompare","append","str","replace","addEventListener"],"mappings":";AAAA,aAiCC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA/BD,IAAMA,EAAYC,SAASC,cAAc,eACnCC,EAAYF,SAASC,cAAc,eACnCE,EAAOC,MAAMC,KAAKH,EAAUI,iBAAiB,OAInD,SAASC,EAAWC,GACZC,IAAAA,EAAeD,EAAEE,OAAOC,QAAQ,MAElC,GAACF,EAAD,CAIEG,IAAAA,EAAaH,EAAaI,UAM1BC,EAAaX,EAAKY,KAAK,SAACC,EAAUC,GAChCC,IAAAA,EAAUF,EAASG,MAAMP,GAAYQ,YACrCC,EAAUJ,EAASE,MAAMP,GAAYQ,YAEvC,OAACE,MAAMC,EAAWL,IAGbA,EAAQM,cAAcH,GAFtBE,EAAWL,GAAWK,EAAWF,KAM5CnB,EAAUuB,OAAVvB,MAAAA,EAAoBY,EAAAA,IAfXS,SAAAA,EAAWG,GACX,OAACA,EAAIC,QAAQ,QAAS,KAZjC5B,EAAU6B,iBAAiB,QAASrB","file":"main.2c801cc5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableHead = document.querySelector('table thead');\nconst tableData = document.querySelector('table tbody');\nconst rows = Array.from(tableData.querySelectorAll('tr'));\n\ntableHead.addEventListener('click', sortFields);\n\nfunction sortFields(e) {\n  const fieldHeading = e.target.closest('th');\n\n  if (!fieldHeading) {\n    return;\n  }\n\n  const fieldIndex = fieldHeading.cellIndex;\n\n  function takeNumber(str) {\n    return +str.replace(/[$,]/g, '');\n  }\n\n  const sortedRows = rows.sort((element1, element2) => {\n    const result1 = element1.cells[fieldIndex].textContent;\n    const result2 = element2.cells[fieldIndex].textContent;\n\n    if (!isNaN(takeNumber(result1))) {\n      return takeNumber(result1) - takeNumber(result2);\n    } else {\n      return result1.localeCompare(result2);\n    }\n  });\n\n  tableData.append(...sortedRows);\n}\n"]}